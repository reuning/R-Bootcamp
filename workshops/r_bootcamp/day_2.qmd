---
title: "Introduction to R: Data Manipulation and Summary"
author: "Kevin Reuning"
format: revealjs
revealjs-plugins:
  - codefocus
---

## Goals for Today

- Manipulate data (filter specific rows, select columns).
- pipes
- Summarizing data

# Data for today 

Today we are going to use a subset of country data from [The Quality of Governance Institute](https://www.gu.se/en/quality-government/qog-data).

- Download the [data we'll be using here](images/country_data.csv)
- You can open it with `read_csv()` and if you need more help check out the [first day of slides.](https://kevinreuning.com/presentations/pages/day_1.html)


```{r}
library(readr)
setwd("images")
df <- read_csv("country_data.csv")
```



## Variables

There is a description of all the [variables I've included here.](https://kevinreuning.com/presentations/pages/country_data.html) 

For now though we are going to use a few of them: 

- `bmr_demdur` is how long the country has been in the same regime type category
- `top_top1_income_share` is the proportion of income that goes to the top 1%. 

# Filtering Data 

Often you want to select just specific rows of data that meet certain requirements. 


## Logical Checks 

We need to include some more operators to do this:

- `<` less than and `>` greater than
- `<=` less than or equal to and `>=` greater than or equal to 
- `==` equal to and `!=` not equal to

. . .

```{r}
43 < 4
(4*pi)^2 > 5
```

## Logical Values 

- The output from these checks is another form of variable called a **logical**. 
- We can have vectors of logical values

```{r}
names <- c("Kevin", "Anne", "Sophie")
names == "Kevin"
```

## Logical Checks with Data 

We can do the same thing but using a variable from our dataset: 

```{r}
## Returns true if dem_dur (regime type length) is more than 100.
df$bmr_demdur > 100 
```

## Filtering Data 

We can use logical checks to filter our data. 

- The `filter()` function is part of the **plyr** package in the **tidyverse**. 
- The first argument will be the data you want to filter. 
- The second argument will be the logical check.  

::: {.callout-note}
Within the `filter()` call you do not need to use `data$` before the variable name, it already knows you are using the data you put in the first argument.
:::

## Filtering Data - Example 

```{r}
library(tidyverse)

# df <- read_csv("country_data.csv") ## remember I did this already
filter(df, bmr_demdur>100)
```

. . . 

If we want we can save the new data as well: 

```{.R}
sub_df <- filter(df, bmr_demdur>100)
```


# Checking Multiple Things 

What about if we want to check if our rows meet multiple condition? Then we need **logical operators**. 

## Logical Operators
- We can reverse a logical value with `!` (e.g. `!TRUE == FALSE`) 
- We have **and** and **or** operators to check multiple logical values. 
    - **and** is `&`
    - **or** is `|` (shift + backslash)
- `&` returns `TRUE` if both values are `TRUE`
- `|` returns `TRUE` if at least one value is `TRUE`

. . .

```{.R}
TRUE & TRUE 
TRUE | FALSE 
TRUE | TRUE 
```
All would return `TRUE`

## Combining Logical Check

We can then combine logical checks together.

```{r}
val <- pi^(2/3)
(val < 1) | (val > 4) # Is it less than 0 or greater than 4?
```

## Multiple Checks in Filtering 

Lets collect countries with 100 years of the same regime type where more than 10% of income goes to the top 1%

```{r}
sub_df <- filter(df, bmr_demdur > 100 & top_top1_income_share > .1)
sub_df$cname
```

## Check 

Create two new datasets.

1. Only countries that have an income share greater than 25%
2. Countries that have had the same regime type for 50 to 100 years. 

## How I did it

```{r}
sub_df1 <- filter(df, top_top1_income_share > .25)
sub_df1$cname
```

```{r}
sub_df2 <- filter(df, bmr_demdur > 50 & bmr_demdur < 100)
sub_df2$cname
```

# Pipes %>% 

Tidyverse syntax makes use of pipes to chain multiple functions together. 

- You use the pipe operator (`%>%`) in between each step. 
- This operator is like saying "take the output from the previous function and put it in the next function"

. . . 

For example (in pseudo-code): 

`Output <- Step 1(Input) %>% Step 2() %>% Step 3()`

**Translation**: Take the Input, apply Step 1 to it, then take the output of Step 1 and apply Step 2 to it, then take the output of Step 2 and apply Step 3 to it, and finally store the output of Step 3 as Output. 

## Example 

```{r}
filter(df, bmr_demdur > 100 & top_top1_income_share > .1) %>% pull(cname)
```

What does the `pull()` function do? It is another way to access a certain column in your data. 


## How else could we have done this? 

```{r}
pull(filter(df, bmr_demdur > 100 & top_top1_income_share > .1), cname)
filter(df, bmr_demdur > 100 & top_top1_income_share > .1)$cname
sub_df <- filter(df, bmr_demdur > 100 & top_top1_income_share > .1)
sub_df$cname
```

## A Note of Caution 

- The `%>%` has been around for a while in the tidyverse. 
- R recently added its own version of this to base R BUT they use `|>` instead. 
- In most cases `%>%` is the same as `|>` 

Yes this is all kind of silly and strange. 

# Summarizing Data 

One of the most useful tidyverse functions is `summarize()`.

- `summarize()` transforms data by applying a function(s) to columns in the data. 
- The first argument will be the data, the rest of the arguments will be functions you want to apply to it. 
- The output will be a smaller data frame where the columns are the output from each function it applied. 

## Simple Examples

What if we want to figure out the mean regime type length for our data? 

```{r}
#| output-location: fragment
summarize(df, mean(bmr_demdur))
```

. . .

What if we want to calculate other statistics? 

. . .

```{r}
summarize(df, mean(bmr_demdur), sd(bmr_demdur), median(bmr_demdur))
```

## Caution - Multiple Return Values

You generally want to use functions that only return 1 value. Why? 

. . . 

```{r}
summarize(df, mean(bmr_demdur), sd(bmr_demdur), median(bmr_demdur), range(bmr_demdur))
```

## Filtering and Summarizing 

What if we want to figure out the average income share for the top 1% for countries that have been around for more than 100 years? 

```{r}
#| output-location: fragment
df %>% filter(bmr_demdur > 100) %>% summarize(mean(top_top1_income_share))
```

. . .

We can improve the output by changing the column name: `summarize(col_name = mean(variable))`

```{r}
df %>% filter(bmr_demdur > 100) %>% summarize(mean = mean(top_top1_income_share))
```

## Number of Observations 

There is also a function specifically for the number of observations: `n()`

```{r}
df %>% filter(bmr_demdur > 100) %>% summarize(n())
```

## Check 

Find the mean and median regime type duration for countries that have more than 0.05 of their income going to the top 1%. Include the number of observations as well. 

Then find the mean and median GDP per capita (`mad_gdppc`) along with the number of observations for countries with a regime type duration of less than 50 years. _There are missing values in this variable, what do we do to ignore them?_

## My Solutions 

```{r}
df %>% filter(top_top1_income_share > .05) %>% 
    summarize(mean=mean(bmr_demdur), median=median(bmr_demdur))
```

. . .

```{r}
df %>% filter(bmr_demdur < 50) %>% 
    summarize(mean=mean(mad_gdppc, na.rm=T), 
              median=median(mad_gdppc, na.rm=T),
              n=n())
```

::: callout-note
You can use multiple lines with pipes, it is common to put the pipe at the end of each line and indent the next line. 
:::

# Grouping

Often we want to provide summaries of groups within the data. For example: how does the GDP vary by type of political regime? 

Here we'll use the `group_by()` function to create groups of our data. 

## `group_by()` alone

`group_by()` expects variable(s) that you want to use to group your dataset: 

```{r}
df %>% group_by(br_elect) 
```

Only change is the addition of **# Groups: by_elect [5]** (grouping variable, and number of groups). 

## Group and Summarize

Lets chain together `group_by()` and `summarize()`

```{r}
df %>% group_by(br_elect) %>% 
    summarize(mean=mean(mad_gdppc, na.rm=T), n = n())
```

. . . 

What is ugly about this? 

## Adding in Filtering 

`is.na()` checks if something is missing or not. 

```{r}
df %>% filter(!is.na(br_elect)) %>% 
    group_by(br_elect) %>% 
    summarize(mean=mean(mad_gdppc, na.rm=T), n = n())
```

::: callout-tip
The `drop_na( )` tidyverse function can replace `filter(!is.na( ))`
:::

## Check 

There are several variables that can be used to group countries. Pick one of them, pick an interval variable that you think might vary by the group, and then calculate the number of observations, mean, and median for each group. 

## My Solution 

- Grouping variable: `br_pvote`
- Interval variable: `van_part`
- Expectation: Countries with proportional representation (1) will have higher participation

```{.R}
df %>% 
    drop_na(br_pvote) %>% 
    group_by(br_pvote) %>%
    summarize(n=n(), mean=mean(van_part, na.rm=T),
            median=median(van_part, na.rm=T))
```
::: {.fragment .current-only data-code-focus="1"}
Data that I am using
:::

::: {.fragment .current-only data-code-focus="2"}
Filtering out observations that are missing a value for `br_pvote`
:::

::: {.fragment .current-only data-code-focus="3"}
Grouping the data frame by `br_pvote`
:::

::: {.fragment data-code-focus="4-5"}
Summarizing (number of observations, mean of `van_part`, median of `van_part`)
:::


# Saving Results 

There are two ways to save our summary results. Both can be helpful depending on what you are doing:

- `write_csv()`: Writes to a CSV file. 
- Creating an exportable table. 

## Huxtable 

We are going to install one more package: [huxtable](https://hughjonesd.github.io/huxtable/index.html) (`install.packages("huxtable")`)

The huxtable package is a _a lot_ so we are not going to get to it all but iet lets you do a lot of things:

- Convert dataframe into a table. 
- Format tables (borders, colors, alignment)
- Export that table in a lot of formats (html, docx, excel, latex...)

## Get a Table to Export

```{r}
tab_out <- df %>% 
    drop_na(br_pvote) %>% 
    group_by(br_pvote) %>%
    summarize(n=n(), mean=mean(van_part, na.rm=T),
            median=median(van_part, na.rm=T))
```

## Using Huxtable {auto-animate=true}

The function `hux()` will create a table object that we can then modify. Lets see what happens when we make a table. 

```{r}
library(huxtable)
ht <- hux(tab_out)
ht
```

## Using Huxtable {auto-animate=true}

We can then modify the style by pipping it into functions like a `theme_basic()` function and `set_align()`

```{r}
library(huxtable)
ht <- hux(tab_out) %>% theme_basic() %>%
    set_align(2:3, 1, "center") # 2:3 is the rows, 1 the columns to modify.
ht
```

## Using Huxtable {auto-animate=true}

Finally we can modify values using the `set_contents()` function

```{r}
library(huxtable)
ht <- hux(tab_out) %>% theme_basic() %>%
    set_align(2:3, 1, "center") %>%
    set_contents(1, 1:4, 
    c("Prop Voting?", "N", "Mean", "Median")) %>%
    set_contents(2:3, 1, c("No", "Yes"))
ht
```


## Saving the Document 

And now we export it with `quick_docx()`

```{r}
#install.packages(c("flextable", "officer"))
quick_docx(ht, file="images/My First Summary Table.docx")
```

You can [download my file if you want](images/My%20First%20Summary%20Table.docx)

## Huxtable Options and Check

There are a lot of options to modify your table [here](https://hughjonesd.github.io/huxtable/huxtable.html). 

I want you to make a table, where at least one cell has non-black text color, one cell is italic, and you have a border on the very bottom of it.

## My Solution 

Using my table from before:

```{r}
ht %>% set_italic(2:3, 3:4) %>%
    set_text_color(1, 1:4, "green") %>%
    set_bottom_border(3, 1:4) 
```

